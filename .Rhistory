module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[5]]
),
list(##Design 6
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[6]]
)
)
mysim <- try(twostage_simulator(
array_id = 1,
n_sim = 2,
primary_objectives = c(tox_target = 0.25,
tox_delta_no_exceed = 0.05,
eff_target = 0.20),
dose_outcome_curves = list(tox_curve = c(0.08,0.11,0.17,0.25,0.35),
eff_curve = c(0.10,0.18,0.25,0.35,0.38),
scenario = 1),
design_list = design_list,
do_efficient_simulation = T,
random_seed = 1
), TRUE)
if(isTRUE(class(mysim)=="try-error")) {
next
} else {
res <- twostage_results(files=c("mysim"), filepath = FALSE,
primary_objectives = c(tox_target = 0.25,
tox_delta_no_exceed = 0.05,
eff_target = 0.20))
res
}
}
}
}
warnings()
design_list <- list(
list(##Design 1
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[1]]
),
list(##Design 2
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[2]]
),
list(##Design 3
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[3]]
),
list(##Design 4
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[4]]
),
list(##Design 5
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[5]]
),
list(##Design 6
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[6]]
)
)
mysim <- twostage_simulator(
array_id = 1,
n_sim = 2,
primary_objectives = c(tox_target = 0.25,
tox_delta_no_exceed = 0.05,
eff_target = 0.20),
dose_outcome_curves = list(tox_curve = c(0.08,0.11,0.17,0.25,0.35),
eff_curve = c(0.10,0.18,0.25,0.35,0.38),
scenario = 1),
design_list = design_list,
do_efficient_simulation = T,
random_seed = 1
)
mod5 <- list(
list(name = "bayes", prob_threshold = 0.8, prior_mean = rep(0.1, 5), prior_n_per = 1, include_stage1_data = T),
list(name = "bayes_isoreg", prob_threshold = 0.8, alpha_scale = 1e7, include_stage1_data = T),
list(name = "inverted_score", ci_level_onesided = 0.9, include_stage1_data = T),
list(name = "min_num_resp", number = 20, include_stage1_data = T),
list(name = "min_pct_resp", percent = 30, include_stage1_data=T),
list(name = "none")
)
design_list <- list(
list(##Design 1
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[1]]
),
list(##Design 2
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[2]]
),
list(##Design 3
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[3]]
),
list(##Design 4
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[4]]
),
list(##Design 5
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[5]]
),
list(##Design 6
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[6]]
)
)
mysim <- twostage_simulator(
array_id = 1,
n_sim = 2,
primary_objectives = c(tox_target = 0.25,
tox_delta_no_exceed = 0.05,
eff_target = 0.20),
dose_outcome_curves = list(tox_curve = c(0.08,0.11,0.17,0.25,0.35),
eff_curve = c(0.10,0.18,0.25,0.35,0.38),
scenario = 1),
design_list = design_list,
do_efficient_simulation = T,
random_seed = 1
)
for (i in mod1){
for (j in mod2){
for (k in mod4){
design_list <- list(
list(##Design 1
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[1]]
),
list(##Design 2
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[2]]
),
list(##Design 3
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[3]]
),
list(##Design 4
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[4]]
),
list(##Design 5
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[5]]
),
list(##Design 6
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[6]]
)
)
mysim <- try(twostage_simulator(
array_id = 1,
n_sim = 2,
primary_objectives = c(tox_target = 0.25,
tox_delta_no_exceed = 0.05,
eff_target = 0.20),
dose_outcome_curves = list(tox_curve = c(0.08,0.11,0.17,0.25,0.35),
eff_curve = c(0.10,0.18,0.25,0.35,0.38),
scenario = 1),
design_list = design_list,
do_efficient_simulation = T,
random_seed = 1
), TRUE)
if(isTRUE(class(mysim)=="try-error")) {
next
} else {
res <- twostage_results(files=c("mysim"), filepath = FALSE,
primary_objectives = c(tox_target = 0.25,
tox_delta_no_exceed = 0.05,
eff_target = 0.20))
res
}
}
}
}
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(knitr)
library(cowplot)
library(seamlesssim)
mod1 <- list(
list(name = "crm", n = 35, skeleton = c(0.08,0.11,0.17,0.25,0.35), starting_dose = 1,
beta_scale = 0.6, dose_cohort_size = 3, dose_cohort_size_first_only = T, earliest_stop = 6),
list(name = "3pl3", starting_dose = 2),
list(name = "empiric", starting_dose = 3, rule = "local", first_patient_look = 8, thresh_decrease = 0.4),
list(name = "fixed", n = 35, starting_dose = 1)
)
mod2 <- list(
list(name="bayes", prob_threshold = 0.25, prior_mean = rep(0.2, 5), prior_n_per = 1, include_stage1_data = T),
list(name = "bayes_isoreg", prob_threshold = 0.3, alpha_scale = 1e7),
list(name = "inverted_score", ci_level_onesided = 0.9),
list(name = "min_num_resp", number = 10),
list(name = "min_pct_resp", percent = 20),
list(name = "none")
)
mod4 <- list(
list(name = "crm", n = 30, skeleton = c(0.12, 0.13, 0.14, 0.15, 0.16), beta_scale = 0.6, dose_cohort_size = 3,
dose_cohort_size_first_only = T, earliest_stop = 6),
list(name = "3pl3"),
list(name = "empiric", n = 30, rule = "local", first_patient_look = 6, thresh_decrease = 0.2),
list(name = "fixed", n = 20),
list(name = "continue_crm", n = 15),
list(name = "none")
)
mod5 <- list(
list(name = "bayes", prob_threshold = 0.8, prior_mean = rep(0.1, 5), prior_n_per = 1, include_stage1_data = T),
list(name = "bayes_isoreg", prob_threshold = 0.8, alpha_scale = 1e7, include_stage1_data = T),
list(name = "inverted_score", ci_level_onesided = 0.9, include_stage1_data = T),
list(name = "min_num_resp", number = 20, include_stage1_data = T),
list(name = "min_pct_resp", percent = 30, include_stage1_data=T),
list(name = "none")
)
errorcount <- 0
for (i in mod1){
for (j in mod2){
for (k in mod4){
design_list <- list(
list(##Design 1
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[1]]
),
list(##Design 2
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[2]]
),
list(##Design 3
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[3]]
),
list(##Design 4
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[4]]
),
list(##Design 5
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[5]]
),
list(##Design 6
module1 = i,
module2 = j,
module4 = k,
module5 = mod5[[6]]
)
)
mysim <- try(twostage_simulator(
array_id = 1,
n_sim = 2,
primary_objectives = c(tox_target = 0.25,
tox_delta_no_exceed = 0.05,
eff_target = 0.20),
dose_outcome_curves = list(tox_curve = c(0.08,0.11,0.17,0.25,0.35),
eff_curve = c(0.10,0.18,0.25,0.35,0.38),
scenario = 1),
design_list = design_list,
do_efficient_simulation = T,
random_seed = 1
), TRUE)
if(isTRUE(class(mysim)=="try-error")) {
errorcount <- errorcount + 1
next
} else {
res <- twostage_results(files=c("mysim"), filepath = FALSE,
primary_objectives = c(tox_target = 0.25,
tox_delta_no_exceed = 0.05,
eff_target = 0.20),
design_labels = c(1:6))
res
}
}
}
}
errorcount <- 0
res
kable(res$tables$acc_dose_rec_table, caption="Proportion of Trials That
Select Acceptable Dose")
res
}
warnings()
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(knitr)
library(cowplot)
?sim_empiric_dec
primary_objectives <- c(tox_target = 0.25,
tox_delta_no_exceed = 0.05,
eff_target = 0.20)
tox_eff_curves <- list(
list(tox_curve = c(0.08,0.11,0.17,0.25,0.35),
eff_curve = c(0.10,0.18,0.25,0.35,0.38),
scenario = 1),
list(tox_curve = c(0.08,0.11,0.17,0.25,0.35),
eff_curve = c(0.10,0.10,0.10,0.35,0.35),
scenario = 2),
list(tox_curve = c(0.03,0.08,0.18,0.30,0.39),
eff_curve = c(0.10,0.18,0.25,0.35,0.38),
scenario = 3)
)
design_list = list(
list(##Design 1
module1 = list(
name = "3pl3",
starting_dose = 1
),
module2 = list(
name = "bayes",
prob_threshold = 0.3,
prior_mean = rep(0.1, 5),
prior_n_per = 1,
include_stage1_data = T
),
module4 = list(
name = "empiric",
n = 35,
rule = "local",
first_patient_look = 10,
thresh_decrease = 0.33
),
module5 = list(
name = "bayes",
prob_threshold = 0.38,
prior_mean = rep(0.1, 5),
prior_n_per = 1,
include_stage1_data = T
)
),
#
list(##Design 2
module1 = list(
name = "crm",
n = 25,
starting_dose = 1,
skeleton = c(0.08,0.11,0.17,0.25,0.35),
beta_scale = 0.6,
dose_cohort_size = 3,
dose_cohort_size_first_only = T,
earliest_stop = 6
),
module2 = list(
name = "bayes",
prob_threshold = 0.35,
prior_mean = rep(0.1, 5),
prior_n_per = 1,
include_stage1_data = T
),
module4 = list(
name = "continue_crm",
n = 35
),
module5 = list(
name = "bayes",
prob_threshold = 0.75,
prior_mean = rep(0.1, 5),
prior_n_per = 1,
include_stage1_data = T
)
),
#
list(##Design 3
module1 = list(
name = "crm",
n = 25,
starting_dose = 1,
skeleton = c(0.08,0.11,0.17,0.25,0.35),
beta_scale = 0.6,
dose_cohort_size = 3,
dose_cohort_size_first_only = T,
earliest_stop = 6
),
module4 = list(
name = "continue_crm",
n = 35
),
module5 = list(
name = "bayes_isoreg",
prob_threshold = 0.87,
alpha_scale = 1e7,
include_stage1_data = T
)
)
)
design_labels <- c("3pl3:bayes::emp:bayes", "crm:bayes::crm:bayes", "crm::isoreg")
mysims_scen1 <- twostage_simulator(array_id = 1,
n_sim = 5,
primary_objectives = primary_objectives,
dose_outcome_curves = tox_eff_curves[[1]],
design_list = design_list,
stan_args = NA,
sim_labels = NULL,
design_labels = design_labels,
do_efficient_simulation = T,
random_seed = 1)
mysims_scen2 <- twostage_simulator(array_id = 1,
n_sim = 5,
primary_objectives = primary_objectives,
dose_outcome_curves = tox_eff_curves[[2]],
design_list = design_list,
stan_args = NA,
sim_labels = NULL,
design_labels = design_labels,
do_efficient_simulation = T,
random_seed = 1)
mysims_scen3 <- twostage_simulator(array_id = 1,
n_sim = 5,
primary_objectives = primary_objectives,
dose_outcome_curves = tox_eff_curves[[3]],
design_list = design_list,
stan_args = NA,
sim_labels = NULL,
design_labels = design_labels,
do_efficient_simulation = T,
random_seed = 1)
myfiles <- c("mysims_scen1", "mysims_scen2", "mysims_scen3")
myresults <- twostage_results(files = myfiles,
filepath = FALSE,
primary_objectives = primary_objectives,
design_labels = design_labels)
plot_grid(myresults$plots$acc_dose_rec_plot, myresults$plots$gen_params_plot,
ncol = 2, nrow=1, rel_widths = c(5,3))
plot_grid(myresults$plots$acc_dose_rec_plot[[1]], myresults$plots$gen_params_plot[[1]],
ncol = 2, nrow=1, rel_widths = c(5,3))
myresults
length(myresults$plots$acc_dose_rec_plot)
kable(myresults$tables$acc_dose_rec_table, caption="Proportion of Trials That
Select Acceptable Dose")
devtools::document()
?seamlesssim
devtools::document()
twostage_simulator()
?twostage_simulator
devtools::document()
?twostage_simulator
devtools::document()
?twostage_simulator
devtools::document()
devtools::build_vignettes()
devtools::load_all()
devtools::document()
devtools::build_manual()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(devtools)
devtools::document()
devtools::load_all()
?twostage_simulator
devtools::document()
?twostage_simulator
devtools::document()
?twostage_simulator
devtools::document()
library(devtools)
devtools::build_manual()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::load_all()
devtools::build_vignettes()
devtools::load_all()
devtools::build_vignettes()
